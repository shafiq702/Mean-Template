'use strict';

var app = angular.module('main', ['ui.router', 'textAngular']);

app.config(function ($urlRouterProvider, $locationProvider) {
  // This turns off hashbang urls (/#about) and changes it to something normal (/about)
  // $locationProvider.html5Mode(true);
  // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
  $urlRouterProvider.otherwise('/');
});

app.run(function ($rootScope, $state, AuthFactory) {
  $rootScope.$on('$stateChangeStart', function (event, next, current) {
    // AuthFactory.getUserStatus().then(function(data){console.log(data)})
    AuthFactory.getUserStatus().then(function () {
      if (next.data.restricted && !AuthFactory.isLoggedIn()) {
        event.preventDefault();
        $state.go('LoginState');
      }
    });
  });
});

app.factory('AuthFactory', function ($http) {

  var user = null;

  return {
    isLoggedIn: function isLoggedIn() {
      if (user) {
        return true;
      } else {
        return false;
      }
    },
    getUserStatus: function getUserStatus() {
      return $http.get('/auth/status')
      // handle success
      .then(function (data) {
        console.log('factory ', data.data.status);
        if (data.data.status) {
          user = true;
        } else {
          user = false;
        }
      })
      // handle error
      ['catch'](function (data) {
        user = false;
        return user;
      });
    },
    login: function login(username, password) {
      return $http.post('/auth/login', {
        username: username,
        password: password
      }).then(function (data) {
        if (data.status === 200) {
          user = true;
          return data.data;
        } else {
          user = false;
          throw new Error('testing this out');
        }
      })['catch'](function (error) {
        user = false;
        return error;
      });
    },
    logout: function logout() {
      return $http.get('/auth/logout').then(function (data) {
        user = false;
        return user;
      })['catch'](function (err) {
        user = false;
        return err;
      });
    },
    register: function register(username, password) {
      return $http.post('/auth/register', {
        username: username,
        password: password
      }).then(function (data) {
        if (data.status === 200) {
          user = true;
          return data.data;
        } else {
          user = false;
          throw new Error();
        }
      })['catch'](function (error) {
        user = false;
        return error;
      });
    }
  };
});

app.factory('BlogFactory', function ($http, AuthFactory) {
  var user = AuthFactory.currentUser();
  return {
    createPost: function createPost(post) {
      post.author = user.name;
      return $http.post('/admin/post/create', post).then(function (post) {
        return post.data;
      });
    },
    findAllPosts: function findAllPosts() {
      return $http.get('./admin/post').then(function (allPosts) {
        return allPosts.data;
      });
    }
  };
});

app.directive('navbar', function (AuthFactory, $state) {
  return {
    restrict: 'E',
    templateUrl: '/components/navbar/navbar.html',
    link: function link(scope) {
      scope.loggedIn = function () {
        return AuthFactory.isLoggedIn();
      };

      scope.logout = function () {
        return AuthFactory.logout().then(function () {
          $state.go('LoginState');
        });
      };
    }
  };
});

app.controller('HomeCtrl', function ($scope) {
  //logic here
});

app.config(function ($stateProvider) {
  $stateProvider.state('HomeState', {
    url: '/',
    templateUrl: 'app/js/home/home.html',
    controller: 'HomeCtrl',
    data: {
      restricted: false
    }
  });
});

app.controller('LoginCtrl', function ($scope, AuthFactory, $state) {

  $scope.submitLogin = function () {

    // initial values
    $scope.error = false;
    $scope.disabled = true;

    AuthFactory.login($scope.user.username, $scope.user.password).then(function (data) {
      $state.go('AdminState');
      $scope.disabled = false;
      $scope.user = {};
    }).then(null, function (err) {
      $scope.error = true;
      $scope.errorMessage = "Invalid username and/or password";
      $scope.disabled = false;
      $scope.loginForm = {};
    });
  };
});

app.config(function ($stateProvider) {
  $stateProvider.state('LoginState', {
    url: '/login',
    templateUrl: 'app/js/login/login.html',
    controller: 'LoginCtrl',
    data: {
      restricted: false
    }
  });
});

app.controller('RegisterCtrl', function ($scope, AuthFactory, $state) {

  $scope.register = function () {
    // initial values
    $scope.error = false;
    $scope.disabled = true;

    // call register from service
    AuthFactory.register($scope.registerForm.username, $scope.registerForm.password)
    // handle success
    .then(function () {
      $state.go('LoginState');
      $scope.disabled = false;
      $scope.registerForm = {};
    })
    // handle error
    ['catch'](function () {
      $scope.error = true;
      $scope.errorMessage = "Something went wrong!";
      $scope.disabled = false;
      $scope.registerForm = {};
    });
  };
});

app.config(function ($stateProvider) {
  $stateProvider.state('RegiserState', {
    url: '/register',
    templateUrl: 'app/js/register/register.html',
    controller: 'RegisterCtrl',
    data: {
      restricted: false
    }
  });
});

app.controller('CreateCtrl', function ($scope, BlogFactory, $state) {

  $scope.createPost = function () {
    BlogFactory.createPost($scope.htmlVariable).then(function () {
      $state.go('AdminPosts');
    }).then(function () {
      $scope.htmlVariable = {};
    })['catch'](function (err) {
      console.log(err);
    });
  };
});

app.config(function ($stateProvider) {
  $stateProvider.state('CreateState', {
    url: '/admin/posts/create',
    templateUrl: 'app/js/admin/blog/create.html',
    controller: 'CreateCtrl',
    data: {
      restricted: true
    }
  });
});

app.controller('PostsCtrl', function ($scope, allPosts) {
  $scope.allPosts = allPosts;
});

app.config(function ($stateProvider) {
  $stateProvider.state('AdminPosts', {
    url: '/admin/posts',
    templateUrl: 'app/js/admin/blog/posts.html',
    controller: 'PostsCtrl',
    data: {
      restricted: true
    },
    resolve: {
      allPosts: function allPosts(BlogFactory) {
        return BlogFactory.findAllPosts().then(function (allPosts) {
          return allPosts;
        });
      }
    }
  });
});

app.controller('AdminCtrl', function ($scope, $rootScope) {});

app.config(function ($stateProvider) {
  $stateProvider.state('AdminState', {
    url: '/admin',
    templateUrl: 'app/js/admin/dashboard/dashboard.html',
    controller: 'AdminCtrl',
    data: {
      restricted: true
    }
  });
});
//# sourceMappingURL=data:application/json;base64,
