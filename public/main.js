'use strict';

var app = angular.module('main', ['ui.router']);
app.config(function ($urlRouterProvider, $locationProvider) {
	// This turns off hashbang urls (/#about) and changes it to something normal (/about)
	// $locationProvider.html5Mode(true);
	// If we go to a URL that ui-router doesn't have registered, go to the "/" url.
	$urlRouterProvider.otherwise('/');
});

app.factory('AuthFactory', function ($http) {

	var currentUser;

	function extractData(res) {
		currentUser = res.data;
		return res.data;
	}

	var setCurrentUser = function setCurrentUser(user) {
		currentUser = user;
		return currentUser;
	};

	return {
		login: function login(creds) {
			return $http.post('/admin/login', creds).then(extractData).then(setCurrentUser);
		}
	};
});

app.controller('AdminCtrl', function ($scope) {
	console.log('in admin ctrl');
});

app.config(function ($stateProvider) {
	$stateProvider.state('AdminState', {
		url: '/admin',
		templateUrl: 'app/js/admin-dashboard/admin-dashboard.html',
		controller: 'AdminCtrl'
	});
});

app.controller('HomeCtrl', function ($scope) {
	//logic here
});

app.config(function ($stateProvider) {
	$stateProvider.state('HomeState', {
		url: '/',
		templateUrl: 'app/js/home/home.html',
		controller: 'HomeCtrl'
	});
});

app.controller('LoginCtrl', function ($scope, AuthFactory, $state) {
	$scope.submitLogin = function () {
		AuthFactory.login($scope.user).then(function () {
			$state.go('AdminState');
		}).then(function () {
			$scope.user = {};
		}).then(null, function (err) {
			console.log(err);
		});
	};
});

app.config(function ($stateProvider) {
	$stateProvider.state('LoginState', {
		url: '/login',
		templateUrl: 'app/js/login/login.html',
		controller: 'LoginCtrl'
	});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGguZmFjdG9yeS5qcyIsImpzL2FkbWluLWRhc2hib2FyZC9hZG1pbi1kYXNoYm9hcmQuY29udHJvbGxlci5qcyIsImpzL2FkbWluLWRhc2hib2FyZC9hZG1pbi1kYXNoYm9hcmQuc3RhdGUuanMiLCJqcy9ob21lL2hvbWUuY29udHJvbGxlci5qcyIsImpzL2hvbWUvaG9tZS5zdGF0ZS5qcyIsImpzL2xvZ2luL2xvZ2luLmNvbnRyb2xsZXIuanMiLCJqcy9sb2dpbi9sb2dpbi5zdGF0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUEsR0FBQSxHQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQTtBQUNBLEdBQUEsQ0FBQSxNQUFBLENBQUEsVUFBQSxrQkFBQSxFQUFBLGlCQUFBLEVBQUE7Ozs7QUFJQSxtQkFBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQTtDQUNBLENBQUEsQ0FBQTs7QUNOQSxHQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsRUFBQSxVQUFBLEtBQUEsRUFBQTs7QUFFQSxLQUFBLFdBQUEsQ0FBQTs7QUFFQSxVQUFBLFdBQUEsQ0FBQSxHQUFBLEVBQUE7QUFDQSxhQUFBLEdBQUEsR0FBQSxDQUFBLElBQUEsQ0FBQTtBQUNBLFNBQUEsR0FBQSxDQUFBLElBQUEsQ0FBQTtFQUNBOztBQUVBLEtBQUEsY0FBQSxHQUFBLFNBQUEsY0FBQSxDQUFBLElBQUEsRUFBQTtBQUNBLGFBQUEsR0FBQSxJQUFBLENBQUE7QUFDQSxTQUFBLFdBQUEsQ0FBQTtFQUNBLENBQUE7O0FBRUEsUUFBQTtBQUNBLE9BQUEsRUFBQSxlQUFBLEtBQUEsRUFBQTtBQUNBLFVBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxjQUFBLEVBQUEsS0FBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQTtHQUNBO0VBQ0EsQ0FBQTtDQUNBLENBQUEsQ0FBQTs7QUNyQkEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxXQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUE7QUFDQSxRQUFBLENBQUEsR0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQ0ZBLEdBQUEsQ0FBQSxNQUFBLENBQUEsVUFBQSxjQUFBLEVBQUE7QUFDQSxlQUFBLENBQUEsS0FBQSxDQUFBLFlBQUEsRUFBQTtBQUNBLEtBQUEsRUFBQSxRQUFBO0FBQ0EsYUFBQSxFQUFBLDZDQUFBO0FBQ0EsWUFBQSxFQUFBLFdBQUE7RUFDQSxDQUFBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FDTkEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxVQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUE7O0NBRUEsQ0FBQSxDQUFBOztBQ0ZBLEdBQUEsQ0FBQSxNQUFBLENBQUEsVUFBQSxjQUFBLEVBQUE7QUFDQSxlQUFBLENBQUEsS0FBQSxDQUFBLFdBQUEsRUFBQTtBQUNBLEtBQUEsRUFBQSxHQUFBO0FBQ0EsYUFBQSxFQUFBLHVCQUFBO0FBQ0EsWUFBQSxFQUFBLFVBQUE7RUFDQSxDQUFBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FDTkEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxXQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUEsV0FBQSxFQUFBLE1BQUEsRUFBQTtBQUNBLE9BQUEsQ0FBQSxXQUFBLEdBQUEsWUFBQTtBQUNBLGFBQUEsQ0FBQSxLQUFBLENBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxZQUFBO0FBQ0EsU0FBQSxDQUFBLEVBQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQTtHQUNBLENBQUEsQ0FDQSxJQUFBLENBQUEsWUFBQTtBQUNBLFNBQUEsQ0FBQSxJQUFBLEdBQUEsRUFBQSxDQUFBO0dBQ0EsQ0FBQSxDQUNBLElBQUEsQ0FBQSxJQUFBLEVBQUEsVUFBQSxHQUFBLEVBQUE7QUFDQSxVQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBO0dBQ0EsQ0FBQSxDQUFBO0VBQ0EsQ0FBQTtDQUNBLENBQUEsQ0FBQTs7QUNiQSxHQUFBLENBQUEsTUFBQSxDQUFBLFVBQUEsY0FBQSxFQUFBO0FBQ0EsZUFBQSxDQUFBLEtBQUEsQ0FBQSxZQUFBLEVBQUE7QUFDQSxLQUFBLEVBQUEsUUFBQTtBQUNBLGFBQUEsRUFBQSx5QkFBQTtBQUNBLFlBQUEsRUFBQSxXQUFBO0VBQ0EsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ21haW4nLCBbJ3VpLnJvdXRlciddKTtcbmFwcC5jb25maWcoZnVuY3Rpb24oJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcil7XG5cdC8vIFRoaXMgdHVybnMgb2ZmIGhhc2hiYW5nIHVybHMgKC8jYWJvdXQpIGFuZCBjaGFuZ2VzIGl0IHRvIHNvbWV0aGluZyBub3JtYWwgKC9hYm91dClcblx0Ly8gJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXHQvLyBJZiB3ZSBnbyB0byBhIFVSTCB0aGF0IHVpLXJvdXRlciBkb2Vzbid0IGhhdmUgcmVnaXN0ZXJlZCwgZ28gdG8gdGhlIFwiL1wiIHVybC5cbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xufSlcbiIsImFwcC5mYWN0b3J5KCdBdXRoRmFjdG9yeScsZnVuY3Rpb24oJGh0dHApe1xuXG52YXIgY3VycmVudFVzZXI7XG5cbmZ1bmN0aW9uIGV4dHJhY3REYXRhKHJlcyl7XG5cdFx0Y3VycmVudFVzZXIgPSByZXMuZGF0YTtcblx0XHRyZXR1cm4gcmVzLmRhdGE7XG5cdH1cblxuXHR2YXIgc2V0Q3VycmVudFVzZXIgPSBmdW5jdGlvbih1c2VyKXtcblx0XHRjdXJyZW50VXNlciA9IHVzZXI7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGxvZ2luOiBmdW5jdGlvbihjcmVkcyl7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FkbWluL2xvZ2luJywgY3JlZHMpXG5cdFx0XHQudGhlbihleHRyYWN0RGF0YSlcblx0XHRcdC50aGVuKHNldEN1cnJlbnRVc2VyKVxuXHRcdH1cbiAgfVxufSlcbiIsImFwcC5jb250cm9sbGVyKCdBZG1pbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpe1xuICBjb25zb2xlLmxvZygnaW4gYWRtaW4gY3RybCcpXG59KTtcbiIsImFwcC5jb25maWcoZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG5cdCRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdBZG1pblN0YXRlJywge1xuXHRcdHVybDogJy9hZG1pbicsXG5cdFx0dGVtcGxhdGVVcmw6ICdhcHAvanMvYWRtaW4tZGFzaGJvYXJkL2FkbWluLWRhc2hib2FyZC5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnQWRtaW5DdHJsJ1xuXHR9KTtcbn0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJywgZnVuY3Rpb24oJHNjb3BlKXtcbiAgLy9sb2dpYyBoZXJlXG59KTtcbiIsImFwcC5jb25maWcoZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG5cdCRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdIb21lU3RhdGUnLCB7XG5cdFx0dXJsOiAnLycsXG5cdFx0dGVtcGxhdGVVcmw6ICdhcHAvanMvaG9tZS9ob21lLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdIb21lQ3RybCdcblx0fSk7XG59KTtcbiIsImFwcC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIEF1dGhGYWN0b3J5LCAkc3RhdGUpe1xuICAkc2NvcGUuc3VibWl0TG9naW4gPSBmdW5jdGlvbigpe1xuXHRcdEF1dGhGYWN0b3J5LmxvZ2luKCRzY29wZS51c2VyKVxuXHRcdC50aGVuKGZ1bmN0aW9uKCl7XG5cdFx0XHQkc3RhdGUuZ28oJ0FkbWluU3RhdGUnKVxuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24oKXtcblx0XHRcdCRzY29wZS51c2VyID0ge307XG5cdFx0fSlcblx0XHQudGhlbihudWxsLCBmdW5jdGlvbihlcnIpe1xuXHRcdFx0Y29uc29sZS5sb2coZXJyKVxuXHRcdH0pXG5cdH1cbn0pO1xuIiwiYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcblx0JHN0YXRlUHJvdmlkZXIuc3RhdGUoJ0xvZ2luU3RhdGUnLCB7XG5cdFx0dXJsOiAnL2xvZ2luJyxcblx0XHR0ZW1wbGF0ZVVybDogJ2FwcC9qcy9sb2dpbi9sb2dpbi5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnTG9naW5DdHJsJ1xuXHR9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
